name: "CCO Platform Deployment"

on:
  workflow_call:
    inputs:
      deployBaseName:
        type: string
        description: "Base name for the deployment"
        required: true
        default: ""
      resourceGroupName:
        type: string
        description: "Resource Group where infrastructure will be deployed/updated"
        required: true
        default: ""
      dataLakeName:
        type: string
        description: "DataLake Name"
        required: true
        default: ""
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy_dashboard:
    runs-on: windows-latest
    name: "Dashboard Backend"
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Azure CLI
        # uses: azure/CLI@v1.0.0
        # with:
        #   inlineScript: |
        #     az group create -n ${{ inputs.resourceGroupName }} -l westeurope
        shell: pwsh
        run: |
          az group create -n ${{ inputs.resourceGroupName }} -l westeurope

      - name: "Deploy infrastructure"
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ inputs.resourceGroupName }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./dashboards/GovernanceInfra-Contributors/deploy.bicep
          parameters: name=${{inputs.deployBaseName}} dlsname=${{ inputs.dataLakeName }}
          failOnStderr: false # Remove when warnings are fixed
      
      - name: "Grant permissions spn"
        shell: pwsh
        if: success() || failure()
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          $azure_credentials = ConvertFrom-Json $env:azure_credentials
          $client_id = $azure_credentials.client_id

          Write-Host "Retrieving spnAppId"
          $spnAppId = $azure_credentials.clientId
          
          Write-Host "Retrieving tenantId"
          $tenantId= $azure_credentials.tenantId

          Write-Host "Retrieving subscriptionId"
          $subscriptionId= $azure_credentials.subscriptionId

          echo "::add-mask::$spnAppId"
          echo "::set-secret name=spnAppId::${spnAppId}"

          echo "::add-mask::$tenantId"
          echo "::set-secret name=tenantId::${tenantId}"

          echo "::add-mask::$subscriptionId"
          echo "::set-secret name=subscriptionId::${subscriptionId}"
          
          Write-Host "Adding Contributor to DataLake"
          az role assignment create --assignee $spnAppId --role "Contributor" --scope "/subscriptions/$subscriptionId/resourceGroups/${{ inputs.resourceGroupName }}/providers/Microsoft.Storage/storageAccounts/${{ inputs.dataLakeName }}" | Out-Null
          Write-Host "Adding Storage Blob Data Contributor to DataLake"
          az role assignment create --assignee $spnAppId --role "Storage Blob Data Contributor" --scope "/subscriptions/$subscriptionId/resourceGroups/${{ inputs.resourceGroupName }}/providers/Microsoft.Storage/storageAccounts/${{ inputs.dataLakeName }}" | Out-Null
          Write-Host "Adding Storage Queue Data Contributor to DataLake"
          az role assignment create --assignee $spnAppId --role "Storage Queue Data Contributor" --scope "/subscriptions/$subscriptionId/resourceGroups/${{ inputs.resourceGroupName }}/providers/Microsoft.Storage/storageAccounts/${{ inputs.dataLakeName }}" | Out-Null