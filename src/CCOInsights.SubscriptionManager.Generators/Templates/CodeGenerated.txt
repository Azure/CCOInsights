namespace {{GeneratedNamespace}};
using System.Net.Http;
using CCOInsights.SubscriptionManager.Functions;
using CCOInsights.SubscriptionManager.Functions.Operations;
using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
using Microsoft.Azure.Management.ResourceManager.Fluent;
using Microsoft.Extensions.Logging;
using Microsoft.Azure.WebJobs.Extensions.DurableTask;


public interface I{{GeneratedClassName}}Provider : IProvider<{{GeneratedResponseName}}> { }

public class {{GeneratedClassName}}Provider :  Provider<{{GeneratedResponseName}}>,  I{{GeneratedClassName}}Provider 
{
    public override string Path => {{Path}};
    public override HttpMethod HttpMethod => HttpMethod.Get;

    public  {{GeneratedClassName}}Provider (IHttpClientFactory httpClientFactory, RestClient restClient) : base(httpClientFactory, restClient)
    {
    }
 }

public interface I{{GeneratedClassName}}Updater : IUpdater {}
public class {{GeneratedClassName}}Updater : Updater<{{GeneratedResponseName}}, {{GeneratedClassName}}>, I{{GeneratedClassName}}Updater
{
    public {{GeneratedClassName}}Updater(IStorage storage, ILogger<{{GeneratedClassName}}Updater> logger, I{{GeneratedClassName}}Provider provider) : base(storage, logger, provider)
    {
    }

    protected override {{GeneratedClassName}} Map(string executionId, ISubscription subscription, {{GeneratedResponseName}} response) => 
        {{GeneratedClassName}}.From(subscription.Inner.TenantId, subscription.SubscriptionId, executionId, response);
}