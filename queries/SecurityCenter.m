// Get Security Center Tasks
let
    Source = Json.Document(Web.Contents("https://management.azure.com/subscriptions?api-version=2016-06-01")),
    value = Source[value],
    #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"subscriptionId", "displayName"}, {"Column1.subscriptionId", "Column1.displayName"}),
    #"Renamed Columns" = Table.RenameColumns(#"Expanded Column1",{{"Column1.subscriptionId", "SubscriptionID"}}),
    ListSecurityCenterTasksFunction = Table.AddColumn(#"Renamed Columns", "ListSecurityCenterTasks", each ListSecurityCenterTasks([SubscriptionID])),
    #"Removed Errors" = Table.RemoveRowsWithErrors(ListSecurityCenterTasksFunction, {"ListSecurityCenterTasks"}),
    #"Expanded ListSecurityCenterTasks" = Table.ExpandTableColumn(#"Removed Errors", "ListSecurityCenterTasks", {"Security Task Id", "state", "subState", "creationTimeUtc", "lastStateChangeTimeUtc", "Missing Updates", "Updates Classification", "totalNumberOfImpactedMachines", "severity", "osType", "isMandatory", "workspaceId", "serverCount", "Security Task Name", "resourceId", "baselineRuleId", "baselineName", "baselineCceId", "osName", "ruleType", "totalNumberOfDefectedMachines", "resourceType", "policyName", "vmId", "vmName", "supportedAgents", "isOsDiskEncrypted", "isDataDiskEncrypted", "publicIpName", "fullyQualifiedDomainName", "portsToProtect", "existingWafAvailable", "resourceName", "resourceParent", "resourceParentIPAddress", "protectingNsgId", "ipAddress", "location", "resourceGroup", "subnetIds", "resourcesIdsToProtect", "Resource Type Final", "name", "type", "subscriptionId", "uniqueKey", "id.1", "title", "classification", "healthStatus", "totalMachines", "parentIpAddress", "concreteResourceType", "ImageForTasks"}, {"Security Task Id", "state", "subState", "creationTimeUtc", "lastStateChangeTimeUtc", "Missing Updates", "Updates Classification", "totalNumberOfImpactedMachines", "severity", "osType", "isMandatory", "workspaceId", "serverCount", "Security Task Name", "resourceId", "baselineRuleId", "baselineName", "baselineCceId", "osName", "ruleType", "totalNumberOfDefectedMachines", "resourceType", "policyName", "vmId", "vmName", "supportedAgents", "isOsDiskEncrypted", "isDataDiskEncrypted", "publicIpName", "fullyQualifiedDomainName", "portsToProtect", "existingWafAvailable", "resourceName", "resourceParent", "resourceParentIPAddress", "protectingNsgId", "ipAddress", "location", "resourceGroup", "subnetIds", "resourcesIdsToProtect", "Resource Type Final", "name", "type", "subscriptionId.1", "uniqueKey", "id.1", "title", "classification", "healthStatus", "totalMachines", "parentIpAddress", "concreteResourceType", "ImageForTasks"}),
    #"Duplicated Column" = Table.DuplicateColumn(#"Expanded ListSecurityCenterTasks", "resourceId", "resourceId - Copy"),
    #"Split Column by Delimiter" = Table.SplitColumn(#"Duplicated Column", "resourceId - Copy", Splitter.SplitTextByDelimiter("/", QuoteStyle.Csv), {"resourceId - Copy.1", "resourceId - Copy.2", "resourceId - Copy.3", "resourceId - Copy.4", "resourceId - Copy.5", "resourceId - Copy.6", "resourceId - Copy.7", "resourceId - Copy.8", "resourceId - Copy.9", "resourceId - Copy.10", "resourceId - Copy.11"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"resourceId - Copy.1", type text}, {"resourceId - Copy.2", type text}, {"resourceId - Copy.3", type text}, {"resourceId - Copy.4", type text}, {"resourceId - Copy.5", type text}, {"resourceId - Copy.6", type text}, {"resourceId - Copy.7", type text}, {"resourceId - Copy.8", type text}, {"resourceId - Copy.9", type text}, {"resourceId - Copy.10", type text}, {"resourceId - Copy.11", type text}}),
    #"Renamed Columns1" = Table.RenameColumns(#"Changed Type",{{"resourceId - Copy.5", "Resource Group Name"}, {"resourceId - Copy.9", "Resource Name"}, {"resourceId - Copy.8", "Resource Type"}, {"resourceId - Copy.10", "Subnet"}, {"resourceId - Copy.11", "Subnet Name"}}),
    #"Removed Columns" = Table.RemoveColumns(#"Renamed Columns1",{"Subnet", "resourceId - Copy.3", "resourceId - Copy.4", "resourceId - Copy.6", "resourceId - Copy.7", "resourceId - Copy.1", "resourceId - Copy.2"}),
    #"Added Conditional Column" = Table.AddColumn(#"Removed Columns", "Custom", each if Text.Contains([Security Task Name], "EncryptionOnVm") then "https://docs.microsoft.com/en-us/azure/security/azure-security-disk-encryption" else if Text.Contains([Security Task Name], "VirtualMachinesNsgShouldRestrict") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-restrict-access-through-internet-facing-endpoints" else if Text.Contains([Security Task Name], "InstallAntimalware") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-install-endpoint-protection" else if Text.Contains([Security Task Name], "VulnerabilityAssessmentDeployment") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-vulnerability-assessment-recommendations" else if Text.Contains([Security Task Name], "JitNetworkAccessRecommendation") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-just-in-time" else if Text.Contains([Security Task Name], "ProvisionNgfw") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-add-next-generation-firewall" else if Text.Contains([Security Task Name], "Enable auditing") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-auditing-on-sql-servers" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnSubnet") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-network-security-groups" else if Text.Contains([Security Task Name], "Enable Transparent encryption") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-transparent-data-encryption" else if Text.Contains([Security Task Name], "ProvisionWafArm") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-add-web-application-firewall" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnVm") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-network-security-groups" else if Text.Contains([Security Task Name], "RebootVm") then "https://docs.microsoft.com/en-us/azure/security-center/security-center-apply-system-updates#reboot-after-system-updates" else if [policyName] = "Enable MFA for accounts with owner permissions on your subscription" then "https://docs.microsoft.com/en-us/azure/active-directory/authentication/howto-mfa-userstates" else if [policyName] = "Designate up to 3 owners on your subscription" then "https://docs.microsoft.com/en-us/azure/role-based-access-control/overview" else if [policyName] = "Designate more than one owner on your subscription" then "https://docs.microsoft.com/en-us/azure/role-based-access-control/overview" else if [policyName] = "Use the latest supported PHP version for API App" then "https://azure.microsoft.com/en-us/updates/app-service-updating-php-to-latest-versions/" else if [policyName] = "Configure IP restrictions for API App" then "https://docs.microsoft.com/en-us/azure/app-service/app-service-ip-restrictions" else null),
    #"Renamed Columns2" = Table.RenameColumns(#"Added Conditional Column",{{"Custom", "Recommendation URL"}}),
    #"Added Conditional Column1" = Table.AddColumn(#"Renamed Columns2", "Solution", each if Text.Contains([Security Task Name], "EncryptionOnVm") then "Azure Security Center recommends that you apply disk encryption if you have Windows or Linux VM disks that are not encrypted using Azure Disk Encryption" else if Text.Contains([Security Task Name], "VirtualMachinesNsgShouldRestrict") then "We recommend that you edit the inbound rules to restrict access to a specified set of sources." else if Text.Contains([Security Task Name], "InstallAntimalware") then "We recommend that endpoint protection be provisioned for all VMs and computers to help identify and remove viruses, spyware, and other malicious software" else if Text.Contains([Security Task Name], "VulnerabilityAssessmentDeployment") then "Currently, a vulnerability assessment is available from Qualys. More partners will be added in the future" else if Text.Contains([Security Task Name], "JitNetworkAccessRecommendation") then "It is recommended to enable Just in time Administration to reduce exposure to a brute force attack" else if Text.Contains([Security Task Name], "ProvisionNgfw") then "Azure Security Center may recommend that you add a next generation firewall (NGFW) from a Microsoft partner to increase your security protections" else if Text.Contains([Security Task Name], "Enable auditing") then "Auditing and threat detection can help you maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnSubnet") then "If you do not have NSGs enabled, Security Center presents two recommendations to you: Enable Network Security Groups on subnets and Enable Network Security Groups on virtual machines. You choose which level, subnet or VM, to apply NSGs" else if Text.Contains([Security Task Name], "Enable Transparent encryption") then " TDE protects your data and helps you meet compliance requirements by encrypting your database, associated backups, and transaction log files at rest, without requiring changes to your application" else if Text.Contains([Security Task Name], "ProvisionWafArm") then "Security Center recommends that you provision a WAF to help defend against attacks targeting your web applications on virtual machines and on external App Service Environments (ASE)" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnVm") then "If you do not have NSGs enabled, Security Center presents two recommendations to you: Enable Network Security Groups on subnets and Enable Network Security Groups on virtual machines. You choose which level, subnet or VM, to apply NSGs" else if Text.Contains([Security Task Name], "RebootVm") then "Reboot the Virtual Machine" else if [policyName] = "Enable MFA for accounts with owner permissions on your subscription" then "Azure Multi-Factor Authentication is an easy to use, scalable, and reliable solution that provides a second method of authentication to protect your users." else if [policyName] = "Designate up to 3 owners on your subscription" then "Minimize the number of subscription owners whenever is possible" else if [policyName] = "Designate more than one owner on your subscription" then "Enable at least a second subscription owner account to avoid access issues if something happen to the unique owner" else if [policyName] = "Web Sockets should be disabled for Web Application" then "The Web Sockets protocol is vulnerable to different types of security threats. Use of Web Sockets within a web application must be carefully reviewed." else if [policyName] = "Use the latest supported PHP version for API App" then "Recommends that you use the latest PHP version for the latest security classes. Using older classes and types can make your application vulnerable." else if [policyName] = "Configure IP restrictions for API App" then "IP Restrictions allow you to define a priority ordered allow/deny list of IP addresses that are allowed to access your app. The allow list can include IPv4 and IPv6 addresses. When there are one or more entries, there is then an implicit deny all that exists at the end of the list." else null),
    #"Added Conditional Column2" = Table.AddColumn(#"Added Conditional Column1", "Problem", each if Text.Contains([Security Task Name], "EncryptionOnVm") then "VM Disks Encryption not enabled" else if Text.Contains([Security Task Name], "JitNetworkAccessRecommendation") then "Just in time VM access not enabled" else if Text.Contains([Security Task Name], "ProvisionNgfw") then "Add a next generation firewall" else if Text.Contains([Security Task Name], "VirtualMachinesNsgShouldRestrict") then "Your NSG has inbound rules that open access to ‘Any’ or ‘Internet’ which might enable attackers to access your resources" else if Text.Contains([Security Task Name], "InstallAntimalware") then "A supported antimalware solution is not installed on these Azure VMs." else if Text.Contains([Security Task Name], "VulnerabilityAssessmentDeployment") then "If Security Center doesn't find a vulnerability assessment solution installed on your VM, it recommends that you install one" else if Text.Contains([Security Task Name], "Enable auditing") then "Auditing and threat detection is not enabled" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnSubnet") then "This network subnet does not have any NSG enabled" else if Text.Contains([Security Task Name], "Enable Transparent encryption") then "Transparent Data Encryption is not enabled on your SQL Database" else if Text.Contains([Security Task Name], "ProvisionWafArm") then "A WAF recommendation is shown for any public facing IP (either Instance Level IP or Load Balanced IP) that has an associated network security group with open inbound web ports (80,443)" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnVm") then "The Virtual Machine does not have any NSG enabled" else if Text.Contains([Security Task Name], "RebootVm") then "Virtual Machine needs to reboot after system updates" else [policyName]),
    #"Added Conditional Column3" = Table.AddColumn(#"Added Conditional Column2", "Image", each if Text.Contains([Security Task Name], "EncryptionOnVm") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/EncryptionOnVm.svg?sanitize=true" else if Text.Contains([Security Task Name], "ProvisionNgfw") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/NextGenFirewall.svg?sanitize=true" else if Text.Contains([Security Task Name], "Enable auditing") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/enable_auditing.svg?sanitize=true" else if Text.Contains([Security Task Name], "JitNetworkAccessRecommendation") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/JitAdmin.svg?sanitize=true" else if Text.Contains([Security Task Name], "InstallAntimalware") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/installAntimalware.svg?sanitize=true" else if Text.Contains([Security Task Name], "VulnerabilityAssessmentDeployment") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/VulnerabilityAssessmentDeployment.svg?sanitize=true" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnVm") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/VMNSG.svg?sanitize=true" else if Text.Contains([Security Task Name], "ProvisionWafArm") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/WAF.svg?sanitize=true" else if Text.Contains([Security Task Name], "NetworkSecurityGroupMissingOnSubnet") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/NSGSubnetFinal.svg?sanitize=true" else if Text.Contains([Security Task Name], "Enable Transparent encryption") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/SQLTDE.svg?sanitize=true" else if Text.Contains([Security Task Name], "Antimalware Health Issues") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/installAntimalware.svg?sanitize=true" else if Text.Contains([Security Task Name], "VirtualMachinesNsgShouldRestrictTrafficTaskParameters") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/InetFacingNSG.svg?sanitize=true" else if Text.Contains([Security Task Name], "RebootVm") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/RebootVm.svg?sanitize=true" else if [policyName] = "Enable MFA for accounts with owner permissions on your subscription" then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/subscriptionsandMFA2.svg?sanitize=true" else if [policyName] = "Designate up to 3 owners on your subscription" then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/3SubscriptionOwners.svg?sanitize=true" else if [policyName] = "Designate more than one owner on your subscription" then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/MoreSubscriptionOwners.svg?sanitize=true" else if [policyName] = "Use the latest supported PHP version for API App" then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/PHPUpdate.svg?sanitize=true" else if [policyName] = "Configure IP restrictions for API App" then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/IPRestrictions.svg?sanitize=true" else null),
    #"Filtered Rows" = Table.SelectRows(#"Added Conditional Column3", each ([Security Task Name] <> "Enable Security Contact Configuration in Policy" and [Security Task Name] <> "EnableApplicationWhitelisting" and [Security Task Name] <> "Subscription has machines with failed baseline rule" and [Security Task Name] <> "Subscription has machines with missing system updates" and [Security Task Name] <> "UpgradePricingTierTaskParameters")),
    #"Merged Columns" = Table.CombineColumns(#"Filtered Rows",{"Resource Type Final", "Resource Type"},Combiner.CombineTextByDelimiter("", QuoteStyle.None),"ResourceType.1"),
    #"Renamed Columns3" = Table.RenameColumns(#"Merged Columns",{{"ResourceType.1", "All Resources Types"}}),
    #"Replaced Value" = Table.ReplaceValue(#"Renamed Columns3","servers","SQL Resources",Replacer.ReplaceText,{"All Resources Types"}),
    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","VirtualMachinevirtualMachines","virtualMachines",Replacer.ReplaceText,{"All Resources Types"}),
    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","virtualMachines","Virtual Machines",Replacer.ReplaceText,{"All Resources Types"}),
    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","publicIPAddresses","Public IP Addresses",Replacer.ReplaceText,{"All Resources Types"}),
    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","WebApplicationsites","Web Application",Replacer.ReplaceText,{"All Resources Types"}),
    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","SubnetvirtualNetworks","Subnet",Replacer.ReplaceText,{"All Resources Types"}),
    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","FunctionAppsites","Functions",Replacer.ReplaceText,{"All Resources Types"}),
    #"Added Conditional Column4" = Table.AddColumn(#"Replaced Value6", "All Resources", each if [All Resources Types] = "Subscription" then [Column1.displayName] else [Resource Name]),
    #"Renamed Columns4" = Table.RenameColumns(#"Added Conditional Column4",{{"Column1.displayName", "Subscription Name"}})
in
    #"Renamed Columns4"

// ListSecurityCenterTasks
let ListSecurityCenterTasks = (subscriptionId as text) =>

let
    Source = Json.Document(Web.Contents("https://management.azure.com/subscriptions/"&subscriptionId&"/providers/microsoft.Security/tasks?api-version=2015-06-01-preview")),
    value = Source[value],
     #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"id", "name", "type", "properties"}, {"id", "name", "type", "properties"}),
    #"Expanded properties" = Table.ExpandRecordColumn(#"Expanded Column1", "properties", {"state", "subState", "creationTimeUtc", "lastStateChangeTimeUtc", "securityTaskParameters"}, {"state", "subState", "creationTimeUtc", "lastStateChangeTimeUtc", "securityTaskParameters"}),
    #"Expanded securityTaskParameters" = Table.ExpandRecordColumn(#"Expanded properties", "securityTaskParameters", {"subscriptionId", "id", "title", "classification", "totalNumberOfImpactedMachines", "severity", "osType", "isMandatory", "workspaces", "name", "uniqueKey", "resourceId", "baselineRuleId", "baselineName", "baselineCceId", "osName", "ruleType", "totalNumberOfDefectedMachines", "resourceType", "policyName", "vmId", "vmName", "lastScanTime", "supportedAgents", "isOsDiskEncrypted", "isDataDiskEncrypted", "groupName", "publicIpName", "fullyQualifiedDomainName", "portsToProtect", "existingWafAvailable", "resourceName", "resourceParent", "resourceParentIPAddress", "protectingNsgId", "ipAddress", "location", "resourceGroup", "subnetIds", "resourcesIdsToProtect"}, {"subscriptionId", "id.1", "title", "classification", "totalNumberOfImpactedMachines", "severity", "osType", "isMandatory", "workspaces", "name.1", "uniqueKey", "resourceId", "baselineRuleId", "baselineName", "baselineCceId", "osName", "ruleType", "totalNumberOfDefectedMachines", "resourceType", "policyName", "vmId", "vmName", "lastScanTime", "supportedAgents", "isOsDiskEncrypted", "isDataDiskEncrypted", "groupName", "publicIpName", "fullyQualifiedDomainName", "portsToProtect", "existingWafAvailable", "resourceName", "resourceParent", "resourceParentIPAddress", "protectingNsgId", "ipAddress", "location", "resourceGroup", "subnetIds", "resourcesIdsToProtect"}),
    #"Expanded workspaces" = Table.ExpandListColumn(#"Expanded securityTaskParameters", "workspaces"),
    #"Expanded workspaces1" = Table.ExpandRecordColumn(#"Expanded workspaces", "workspaces", {"workspaceId", "serverCount"}, {"workspaceId", "serverCount"}),
    #"Expanded portsToProtect" = Table.ExpandListColumn(#"Expanded workspaces1", "portsToProtect"),
    #"Renamed Columns" = Table.RenameColumns(#"Expanded portsToProtect",{{"name.1", "Security Task Name"}, {"id", "Security Task Id"}}),
    #"Removed Columns" = Table.RemoveColumns(#"Renamed Columns",{"name", "type", "subscriptionId", "id.1"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Removed Columns",{{"title", "Missing Updates"}, {"classification", "Updates Classification"}}),
    #"Removed Columns1" = Table.RemoveColumns(#"Renamed Columns1",{"uniqueKey"}),
    #"Duplicated Column" = Table.DuplicateColumn(#"Removed Columns1", "resourceType", "resourceType - Copy"),
    #"Renamed Columns2" = Table.RenameColumns(#"Duplicated Column",{{"resourceType - Copy", "Resource Type Final"}}),
    #"Expanded subnetIds" = Table.ExpandListColumn(#"Renamed Columns2", "subnetIds"),
    #"Expanded resourcesIdsToProtect" = Table.ExpandListColumn(#"Expanded subnetIds", "resourcesIdsToProtect")
in
    #"Expanded resourcesIdsToProtect"
in
    ListSecurityCenterTasks

// Get Security Center Alerts
let
    Source = Json.Document(Web.Contents("https://management.azure.com/subscriptions?api-version=2016-06-01")),
    value = Source[value],
    #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"subscriptionId", "displayName"}, {"Column1.subscriptionId", "Column1.displayName"}),
    #"Renamed Columns" = Table.RenameColumns(#"Expanded Column1",{{"Column1.subscriptionId", "SubscriptionId"}}),
    #"Invoked Custom Function" = Table.AddColumn(#"Renamed Columns", "ListSecurityCenterAlerts", each ListSecurityCenterAlerts([SubscriptionId])),
    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Invoked Custom Function", {"ListSecurityCenterAlerts"}),
    #"Expanded ListSecurityCenterAlerts" = Table.ExpandTableColumn(#"Removed Errors", "ListSecurityCenterAlerts", {"Alert Id", "alertDisplayName", "alertName", "detectedTimeUtc", "description", "remediationSteps", "actionTaken", "reportedSeverity", "compromisedEntity", "associatedResource", "subscriptionId", "instanceId", "alert Start Time (UTC)", "source", "non-Existent Users", "existing Users", "failed Attempts", "successful Logins", "successful User Logons", "account Logon Ids", "failed User Logons", "end Time UTC", "enrichment_tas_threat__reports", "state", "reportedTimeUtc", "workspaceArmId", "confidenceReasons", "canBeInvestigated", "Unique Alert Id", "Resource Type", "dnsDomain", "hostName", "azureID", "omsAgentID", "name.1", "address"}, {"Alert Id", "alertDisplayName", "alertName", "detectedTimeUtc", "description", "remediationSteps", "actionTaken", "reportedSeverity", "compromisedEntity", "associatedResource", "subscriptionId.1", "instanceId", "alert Start Time (UTC)", "source", "non-Existent Users", "existing Users", "failed Attempts", "successful Logins", "successful User Logons", "account Logon Ids", "failed User Logons", "end Time UTC", "enrichment_tas_threat__reports", "state", "reportedTimeUtc", "workspaceArmId", "confidenceReasons", "canBeInvestigated", "Unique Alert Id", "Resource Type", "dnsDomain", "hostName", "azureID", "omsAgentID", "name.1", "address"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Expanded ListSecurityCenterAlerts",{{"alertDisplayName", "Attack Type"}, {"compromisedEntity", "Impacted Resource"}, {"remediationSteps", "Potential Remediation"}, {"detectedTimeUtc", "Detected Time UTC"}, {"end Time UTC", "End Time UTC"}, {"source", "Attack Source IP Address"}}),
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns1",{{"Detected Time UTC", type datetime}}),
    #"Added Conditional Column" = Table.AddColumn(#"Changed Type", "AttackImage", each if Text.Contains([Attack Type], "Failed RDP Brute Force Attack") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/UnderAttack.svg?sanitize=true" else if Text.Contains([Attack Type], "Possible incoming SQL brute force") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/SQLUnderAttack.svg?sanitize=true" else if Text.Contains([Attack Type], "network activity") then "https://raw.githubusercontent.com/JSFCES/DashboardImages/master/SubnetUnderAttack.svg?sanitize=true" else null)
in
    #"Added Conditional Column"

// ListSecurityCenterAlerts
let ListSecurityCenterAlerts = (subscriptionId as text) =>
let
    Source = Json.Document(Web.Contents("https://management.azure.com/subscriptions/"&subscriptionId&"/providers/microsoft.Security/alerts?api-version=2015-06-01-preview")),
    value = Source[value],
    #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"id", "name", "type", "properties"}, {"id", "name", "type", "properties"}),
    #"Expanded properties" = Table.ExpandRecordColumn(#"Expanded Column1", "properties", {"vendorName", "alertDisplayName", "alertName", "detectedTimeUtc", "description", "remediationSteps", "actionTaken", "reportedSeverity", "compromisedEntity", "associatedResource", "subscriptionId", "instanceId", "extendedProperties", "state", "reportedTimeUtc", "workspaceArmId", "confidenceReasons", "canBeInvestigated", "entities"}, {"vendorName", "alertDisplayName", "alertName", "detectedTimeUtc", "description", "remediationSteps", "actionTaken", "reportedSeverity", "compromisedEntity", "associatedResource", "subscriptionId", "instanceId", "extendedProperties", "state", "reportedTimeUtc", "workspaceArmId", "confidenceReasons", "canBeInvestigated", "entities"}),
    #"Expanded extendedProperties" = Table.ExpandRecordColumn(#"Expanded properties", "extendedProperties", {"alert Start Time (UTC)", "source", "non-Existent Users", "existing Users", "failed Attempts", "successful Logins", "successful User Logons", "account Logon Ids", "failed User Logons", "end Time UTC", "enrichment_tas_threat__reports"}, {"alert Start Time (UTC)", "source", "non-Existent Users", "existing Users", "failed Attempts", "successful Logins", "successful User Logons", "account Logon Ids", "failed User Logons", "end Time UTC", "enrichment_tas_threat__reports"}),
    #"Extracted Values" = Table.TransformColumns(#"Expanded extendedProperties", {"confidenceReasons", each Text.Combine(List.Transform(_, Text.From)), type text}),
    #"Expanded entities" = Table.ExpandListColumn(#"Extracted Values", "entities"),
    #"Expanded entities1" = Table.ExpandRecordColumn(#"Expanded entities", "entities", {"$id", "type", "dnsDomain", "hostName", "azureID", "omsAgentID", "name", "address"}, {"$id", "type.1", "dnsDomain", "hostName", "azureID", "omsAgentID", "name.1", "address"}),
    #"Renamed Columns" = Table.RenameColumns(#"Expanded entities1",{{"id", "Alert Id"}}),
    #"Removed Columns" = Table.RemoveColumns(#"Renamed Columns",{"name", "type", "vendorName"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Removed Columns",{{"type.1", "Resource Type"}, {"$id", "Unique Alert Id"}})
in
    #"Renamed Columns1"

in
    ListSecurityCenterAlerts